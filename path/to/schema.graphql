# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Card {
    audio: String
    category: String
    currentLessonCards: [CurrentLessonCards!]!
    difficulty: Float!
    example: String
    id: ID!
    image: String
    isFront: Boolean!
    translation: String!
    user: [User!]!
    userCards: [UserCards!]!
    word: String!
}

type CurrentLessonCards {
    UserCardsId: ID!
    card: [Card!]!
    cardId: ID!
    currentLessonData: DateTime
    grade: Int
    id: ID!
    position: Int
    repetitionCount: Int
    user: [User!]!
    userCards: [UserCards!]!
    userId: ID!
}

type Mutation {
    banUser(ban: BanUserDto!): User!
    changeLimits(limits: ChangeLimitsDto!): User!
    changeTimer(ChangeTimerDto: ChangeTimerDto!): User!
    createRole(input: CreateRoleDto!): Role!
    delCard(id: delCardDto!): Card!
    delUser(id: GetUserDto!): User!
    editCard(UpdateCardDto: UpdateCardDto!): Card!
    login(input: CreateUserDto!): RegistrationReturnModel!
    logout(refreshToken: String!): User!
    refreshToken(refreshToken: String!): RegistrationReturnModel!
    registration(input: CreateUserDto!): RegistrationReturnModel!
    setName(SetNameDto: SetNameDto!): User!
    setRole(role: AddRoleDto!): Role!
}

type Query {
    geRoleByValue(value: String!): Role!
    getAllCards: [Card!]!
    getAllUsers: [UserWithRoles!]!
    getCard(word: String!): Card!
    getUserById(id: GetUserDto!): User!
}

type RegistrationReturnModel {
    accessToken: String
    roles: [Role!]!
    user: User!
}

type Role {
    description: String!
    id: ID!
    value: String!
}

type User {
    activationLink: String!
    avatar: String
    banReason: String
    banned: Boolean!
    cards: [Card!]!
    currenLessons: [CurrentLessonCards!]!
    email: String!
    id: ID!
    isActivated: Boolean!
    lastLessonDate: DateTime
    name: String
    newLimit: Int!
    oldLimit: Int!
    password: String!
    timeForCard: Int!
    userCardsTime: [UserCardsTime!]!
    userLimit: [UserLimit!]!
    userRoles: [Card!]!
}

type UserCards {
    card: [Card!]!
    cardId: ID!
    currentLessonCards: [CurrentLessonCards!]!
    factorOfEasiness: Float!
    grade: Float!
    id: ID!
    interval: Int
    isHard: Boolean!
    isNew: Boolean!
    lastRepetition: DateTime
    nextRepetition: DateTime
    repetitionCount: Int!
    repetitionNumber: Int!
    totalRepetitionCount: Int!
    user: [User!]!
    userId: ID!
    wellKnown: Boolean!
}

type UserCardsTime {
    cardId: ID!
    dateRepetition: DateTime
    id: ID!
    time: Float!
    userId: Float!
}

type UserLimit {
    id: ID!
    today: DateTime!
    todayLimitNew: String!
    todayLimitOld: String!
    user: [User!]!
    userId: ID!
}

type UserWithRoles {
    activationLink: String!
    avatar: String
    banReason: String
    banned: Boolean!
    email: String!
    id: ID!
    isActivated: Boolean!
    lastLessonDate: DateTime
    name: String
    newLimit: Int!
    oldLimit: Int!
    password: String!
    roles: String!
    timeForCard: Int!
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

input AddRoleDto {
    userID: Int!
    value: String!
}

input BanUserDto {
    banReason: String!
    userId: Int!
}

input ChangeLimitsDto {
    newLimit: Int!
    oldLimit: Int!
    userId: Int!
}

input ChangeTimerDto {
    id: Int!
    timeForCard: Int!
}

input CreateRoleDto {
    description: String!
    value: String!
}

input CreateUserDto {
    email: String!
    password: String!
}

input GetUserDto {
    id: Int!
}

input SetNameDto {
    id: Int!
    name: String!
}

input UpdateCardDto {
    audio: String
    category: String
    difficulty: Int
    example: String
    id: Int
    image: String
    translation: String
    word: String
}

input delCardDto {
    id: Int!
}
